// Link the provider and client, 
// load the db URL from the environment 
// variables using 'env()'

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Patient Table/Relation Creation
model Patient {
  id          String   @id @default(uuid())
  patientId   String   @unique
  email       String   @unique
  phone       String   @default("+1234567890") 
  name        String
  age         Int
  dateOfBirth DateTime
  term        Int
  dueDate     DateTime
  latitude    Float?   // Latitude coordinate for patient location
  longitude   Float?   // Longitude coordinate for patient location
  address     String?  // Optional human-readable address

  patientAssignments PatientAssignment[]
  readings           Reading[]
  notifications      Notification[]
  clinicalInfo       ClinicalInformation? // One-to-one relationship with clinical data
}

// Clinical Information Table/Relation Creation
// Stores comprehensive clinical data for GDM patients
model ClinicalInformation {
  id                    String   @id @default(uuid())
  patientId             String   @unique // Foreign key to Patient
  
  // Treatment and Demographics
  nationality           String?
  
  // Physical Measurements
  bmi         Float? // BMI at baseline (Kg/m^2)
  weight                Float? // Weight in Kg
  height                Float? // Height
  weightGainDuringPregnancy Float? // Weight gain during pregnancy (Kg)
  
  // Glucose and Lab Values
  fastingBloodGlucose   Float? // Fasting blood glucose level
  oneHour75Glucose        Float? // 1 hour after 75g of glucose
  twoHour75Glucose        Float? // 2 hours after 75g of glucose
  
  // Clinical Conditions
  hypertensiveDisorders String? // Yes/No for hypertensive disorders
  
  // Vital Signs
  pulseHeartRate        Float? // Pulse/heart rate bt/min
  bpSystolic            Float? // BP Systolic mm/Hg
  bpDiastolic           Float? // BP Diastolic mm/Hg

  // AI Prediction Results
  aiPredictions         GDMPrediction[] 
  
  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  patient               Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId])
  @@map("clinical_information")
}

// AI Prediction Results Table
// Stores predictions from your Flask ML service
model GDMPrediction {
  id                    String   @id @default(uuid())
  clinicalInfoId        String   // Links to ClinicalInformation
  
  // Prediction Results
  predictedGDMRisk      Float    // Risk score (0.0 to 1.0)
  riskCategory          GDMRiskLevel // LOW, MODERATE, HIGH, CRITICAL
  confidence            Float    // Model confidence (0.0 to 1.0)
  
  // Model Information
  modelVersion          String    // Track which ML model version was used
  featuresUsed          Json      // Store which features were used for this prediction
  topInfluentialFeatures String[] // Store the top 5 feature names that influenced this prediction

  // Timestamps
  predictedAt           DateTime @default(now())
  isActive              Boolean  @default(true) // Latest prediction is active
  
  // Relationships
  clinicalInformation   ClinicalInformation @relation(fields: [clinicalInfoId], references: [id], onDelete: Cascade)
  
  @@index([clinicalInfoId, isActive])
  @@index([predictedAt])
  @@index([riskCategory])
  @@map("gdm_predictions")
}

// Doctor Table/Relation Creation
model Doctor {
  // Table attributes and basic constraints:
  id        String  @id @default(uuid()) // PK + unique user id
  email     String  @unique
  phone     String  @default("+1234567890")
  name      String
  specialty String? // Nullable

  // Each healthcare provider can have a list of assignments to oversee the patients
  patientAssignments PatientAssignment[]
  notifications      Notification[]
  glucoseThresholds  GlucoseThresholds? // Added relationship to glucose thresholds
}

// PatientAssignment Table/Relation Creation
// tracks the assignment of patients to doctors
model PatientAssignment {
  id            String   @id @default(uuid())
  doctorId      String
  patientId     String
  lastVisitDate DateTime
  addedDate     DateTime

  hasMessageForDoctor  Boolean @default(false)
  hasMessageForPatient Boolean @default(false)

  doctor          Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient         Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  messages        Message[]
  recommendations Recommendation[]
}

model Recommendation {
  id                  String   @id @default(uuid())
  patientAssignmentId String
  title               String
  description         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isActive            Boolean  @default(true)

  // Relationship
  patientAssignment PatientAssignment @relation(fields: [patientAssignmentId], references: [id], onDelete: Cascade)

  @@index([patientAssignmentId])
}

// Reading Table/Relation Creation
model Reading {
  id        String      @id @default(uuid()) // PK + unique user id
  patientId String
  date      DateTime // date of the when the reading was taken
  time      String // time of when the reading was taken
  // this type is defined at the bottom of the file, 
  // enumarted the timings of the reading
  type      ReadingType
  level     Float
  status    ReadingStatus @default(NORMAL)
  // Nullable attribute, patient may not have record notes on the reading
  notes     String?

  // Relationships and forgein keys:
  // patient who recorded the reading, mapped to patientID
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Message {
  id                  String     @id @default(uuid())
  patientAssignmentId String // Links to PatientAssignment
  senderId            String // Either doctorId or patientId
  senderType          SenderType // DOCTOR or PATIENT
  content             String
  timestamp           DateTime   @default(now())
  isRead              Boolean    @default(false)

  // Relationship
  patientAssignment PatientAssignment @relation(fields: [patientAssignmentId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  content   String
  metadata  Json? //  Store reading values, message previews, etc. as JSON
  isRead    Boolean          @default(false)
  isArchived Boolean         @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?

  //  Only recipient relationships
  patientId String?
  doctorId  String?

  patient Patient? @relation(fields: [patientId], references: [id])
  doctor  Doctor?  @relation(fields: [doctorId], references: [id])

  @@index([patientId, isRead, isArchived])
  @@index([doctorId, isRead, isArchived])
  @@index([createdAt])
  @@map("notifications")
}

model GlucoseThresholds {
  id        String   @id @default(uuid())
  doctorId  String   @unique // One threshold config per doctor
  
  // Hyperglycemia thresholds (mg/dL)
  hyperglycemiaBeforeMeal    Float @default(95)   // Fasting/before meal
  hyperglycemiaAfterMeal     Float @default(140)  // 1-2 hours after meal
  hyperglycemiaMajor         Float @default(180)  // Severe hyperglycemia
  
  // Hypoglycemia thresholds (mg/dL)
  hypoglycemia               Float @default(70)   // Standard hypoglycemia
  hypoglycemiaMajor          Float @default(54)   // Severe hypoglycemia
  
  // Frequency threshold (number of occurrences in 7 days)
  frequentThreshold          Int   @default(3)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  @@map("glucose_thresholds")
}

enum NotificationType {
  DANGEROUS_READING    // For glucose readings that are HIGH or ELEVATED
  NEW_MESSAGE         // For new messages between doctor and patient
  NEW_RECOMMENDATION  // For new recommendations from doctor to patient
  DAILY_REMINDER      // For daily glucose reading reminders
}

// enumarating messaging sender type
enum SenderType {
  DOCTOR
  PATIENT
}

// enumarting the 6 types of the readings we could have
enum ReadingType {
  BEFORE_BREAKFAST
  AFTER_BREAKFAST
  BEFORE_LUNCH
  AFTER_LUNCH
  BEFORE_DINNER
  AFTER_DINNER
}

// enumarting status of patient glucose readings
enum ReadingStatus {
  NORMAL
  HIGH
  ELEVATED
}

enum GDMRiskLevel {
  LOW        // Low risk (0.0-0.3)
  MODERATE   // Moderate risk (0.3-0.6)
  HIGH       // High risk (0.6-0.8)
  CRITICAL   // Critical risk (0.8-1.0)
}
